/* tslint:disable */
/* eslint-disable */
/**
 * NLP Sandbox PHI Deidentifier API
 * # Introduction This NLP tool takes as input a clinical note and returned a de-identified version of the note. This design of this API is a work in progress. # Examples - [NLP Sandbox PHI Deidentifier](https://github.com/nlpsandbox/phi-deidentifier) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: team@nlpsandbox.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TextContactAnnotation,
    TextContactAnnotationFromJSON,
    TextContactAnnotationFromJSONTyped,
    TextContactAnnotationToJSON,
    TextDateAnnotation,
    TextDateAnnotationFromJSON,
    TextDateAnnotationFromJSONTyped,
    TextDateAnnotationToJSON,
    TextIdAnnotation,
    TextIdAnnotationFromJSON,
    TextIdAnnotationFromJSONTyped,
    TextIdAnnotationToJSON,
    TextPersonNameAnnotation,
    TextPersonNameAnnotationFromJSON,
    TextPersonNameAnnotationFromJSONTyped,
    TextPersonNameAnnotationToJSON,
    TextPhysicalAddressAnnotation,
    TextPhysicalAddressAnnotationFromJSON,
    TextPhysicalAddressAnnotationFromJSONTyped,
    TextPhysicalAddressAnnotationToJSON,
} from './';

/**
 * Set of annotations of all types for a text
 * @export
 * @interface AnnotationSet
 */
export interface AnnotationSet {
    /**
     * Date annotations in a text
     * @type {Array<TextDateAnnotation>}
     * @memberof AnnotationSet
     */
    textDateAnnotations: Array<TextDateAnnotation>;
    /**
     * Person name annotations in a text
     * @type {Array<TextPersonNameAnnotation>}
     * @memberof AnnotationSet
     */
    textPersonNameAnnotations: Array<TextPersonNameAnnotation>;
    /**
     * Physical address annotations in a text
     * @type {Array<TextPhysicalAddressAnnotation>}
     * @memberof AnnotationSet
     */
    textPhysicalAddressAnnotations: Array<TextPhysicalAddressAnnotation>;
    /**
     * ID annotations in a text
     * @type {Array<TextIdAnnotation>}
     * @memberof AnnotationSet
     */
    textIdAnnotations: Array<TextIdAnnotation>;
    /**
     * Contact annotations in a text
     * @type {Array<TextContactAnnotation>}
     * @memberof AnnotationSet
     */
    textContactAnnotations: Array<TextContactAnnotation>;
}

export function AnnotationSetFromJSON(json: any): AnnotationSet {
    return AnnotationSetFromJSONTyped(json, false);
}

export function AnnotationSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnnotationSet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'textDateAnnotations': ((json['textDateAnnotations'] as Array<any>).map(TextDateAnnotationFromJSON)),
        'textPersonNameAnnotations': ((json['textPersonNameAnnotations'] as Array<any>).map(TextPersonNameAnnotationFromJSON)),
        'textPhysicalAddressAnnotations': ((json['textPhysicalAddressAnnotations'] as Array<any>).map(TextPhysicalAddressAnnotationFromJSON)),
        'textIdAnnotations': ((json['textIdAnnotations'] as Array<any>).map(TextIdAnnotationFromJSON)),
        'textContactAnnotations': ((json['textContactAnnotations'] as Array<any>).map(TextContactAnnotationFromJSON)),
    };
}

export function AnnotationSetToJSON(value?: AnnotationSet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'textDateAnnotations': ((value.textDateAnnotations as Array<any>).map(TextDateAnnotationToJSON)),
        'textPersonNameAnnotations': ((value.textPersonNameAnnotations as Array<any>).map(TextPersonNameAnnotationToJSON)),
        'textPhysicalAddressAnnotations': ((value.textPhysicalAddressAnnotations as Array<any>).map(TextPhysicalAddressAnnotationToJSON)),
        'textIdAnnotations': ((value.textIdAnnotations as Array<any>).map(TextIdAnnotationToJSON)),
        'textContactAnnotations': ((value.textContactAnnotations as Array<any>).map(TextContactAnnotationToJSON)),
    };
}


