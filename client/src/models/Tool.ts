/* tslint:disable */
/* eslint-disable */
/**
 * NLP Sandbox PHI Deidentifier API
 * # Introduction This NLP tool takes as input a clinical note and returned a de-identified version of the note. This design of this API is a work in progress. # Examples - [NLP Sandbox PHI Deidentifier Example](https://github.com/nlpsandbox/phi-deidentifier-example) 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: team@nlpsandbox.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    License,
    LicenseFromJSON,
    LicenseFromJSONTyped,
    LicenseToJSON,
    ToolType,
    ToolTypeFromJSON,
    ToolTypeFromJSONTyped,
    ToolTypeToJSON,
} from './';

/**
 * Information about an NLP tool
 * @export
 * @interface Tool
 */
export interface Tool {
    /**
     * The tool name
     * @type {string}
     * @memberof Tool
     */
    name: string;
    /**
     * The version of the tool (SemVer string)
     * @type {string}
     * @memberof Tool
     */
    version: string;
    /**
     * 
     * @type {License}
     * @memberof Tool
     */
    license: License;
    /**
     * The place where the code lives
     * @type {string}
     * @memberof Tool
     */
    repository: string;
    /**
     * A short, one-sentence summary of the tool
     * @type {string}
     * @memberof Tool
     */
    description: string;
    /**
     * The author of the tool
     * @type {string}
     * @memberof Tool
     */
    author: string;
    /**
     * The email address of the author
     * @type {string}
     * @memberof Tool
     */
    authorEmail: string;
    /**
     * The URL to the homepage of the tool
     * @type {string}
     * @memberof Tool
     */
    url: string;
    /**
     * 
     * @type {ToolType}
     * @memberof Tool
     */
    type: ToolType;
    /**
     * The version of the tool OpenAPI specification
     * @type {string}
     * @memberof Tool
     */
    apiVersion: string;
}

export function ToolFromJSON(json: any): Tool {
    return ToolFromJSONTyped(json, false);
}

export function ToolFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tool {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'version': json['version'],
        'license': LicenseFromJSON(json['license']),
        'repository': json['repository'],
        'description': json['description'],
        'author': json['author'],
        'authorEmail': json['authorEmail'],
        'url': json['url'],
        'type': ToolTypeFromJSON(json['type']),
        'apiVersion': json['apiVersion'],
    };
}

export function ToolToJSON(value?: Tool | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'version': value.version,
        'license': LicenseToJSON(value.license),
        'repository': value.repository,
        'description': value.description,
        'author': value.author,
        'authorEmail': value.authorEmail,
        'url': value.url,
        'type': ToolTypeToJSON(value.type),
        'apiVersion': value.apiVersion,
    };
}


