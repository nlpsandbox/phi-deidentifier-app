/* tslint:disable */
/* eslint-disable */
/**
 * NLP Sandbox PHI Deidentifier API
 * # Introduction This NLP tool takes as input a clinical note and returned a de-identified version of the note. This design of this API is a work in progress. # Examples - [NLP Sandbox PHI Deidentifier](https://github.com/nlpsandbox/phi-deidentifier) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: team@nlpsandbox.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DateOffsetConfig,
    DateOffsetConfigFromJSON,
    DateOffsetConfigFromJSONTyped,
    DateOffsetConfigToJSON,
    MaskingCharConfig,
    MaskingCharConfigFromJSON,
    MaskingCharConfigFromJSONTyped,
    MaskingCharConfigToJSON,
} from './';

/**
 * The configuration of a deidentification step
 * @export
 * @interface DeidentificationStep
 */
export interface DeidentificationStep {
    /**
     * The minimum confidence level for a given annotation to be de-identified
     * @type {number}
     * @memberof DeidentificationStep
     */
    confidenceThreshold?: number;
    /**
     * 
     * @type {MaskingCharConfig}
     * @memberof DeidentificationStep
     */
    maskingCharConfig?: MaskingCharConfig;
    /**
     * Configuration for the "annotation type" strategy. E.g. "John Smith lives at 123 Main St" -> "[PERSON_NAME] lives at [PHYSICAL_ADDRESS]".
     * @type {object}
     * @memberof DeidentificationStep
     */
    annotationTypeMaskConfig?: object;
    /**
     * Configuration for the redaction strategy. E.g. "John Smith lives at 123 Main St" -> "lives at".
     * @type {object}
     * @memberof DeidentificationStep
     */
    redactConfig?: object;
    /**
     * 
     * @type {DateOffsetConfig}
     * @memberof DeidentificationStep
     */
    dateOffsetConfig?: DateOffsetConfig;
    /**
     * The types of annotations to which the de-identifer should apply the selected strategy
     * @type {Array<string>}
     * @memberof DeidentificationStep
     */
    annotationTypes: Array<DeidentificationStepAnnotationTypesEnum>;
}

/**
* @export
* @enum {string}
*/
export enum DeidentificationStepAnnotationTypesEnum {
    Date = 'text_date',
    PersonName = 'text_person_name',
    PhysicalAddress = 'text_physical_address',
    Id = 'text_id',
    Contact = 'text_contact'
}

export function DeidentificationStepFromJSON(json: any): DeidentificationStep {
    return DeidentificationStepFromJSONTyped(json, false);
}

export function DeidentificationStepFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeidentificationStep {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'confidenceThreshold': !exists(json, 'confidenceThreshold') ? undefined : json['confidenceThreshold'],
        'maskingCharConfig': !exists(json, 'maskingCharConfig') ? undefined : MaskingCharConfigFromJSON(json['maskingCharConfig']),
        'annotationTypeMaskConfig': !exists(json, 'annotationTypeMaskConfig') ? undefined : json['annotationTypeMaskConfig'],
        'redactConfig': !exists(json, 'redactConfig') ? undefined : json['redactConfig'],
        'dateOffsetConfig': !exists(json, 'dateOffsetConfig') ? undefined : DateOffsetConfigFromJSON(json['dateOffsetConfig']),
        'annotationTypes': json['annotationTypes'],
    };
}

export function DeidentificationStepToJSON(value?: DeidentificationStep | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'confidenceThreshold': value.confidenceThreshold,
        'maskingCharConfig': MaskingCharConfigToJSON(value.maskingCharConfig),
        'annotationTypeMaskConfig': value.annotationTypeMaskConfig,
        'redactConfig': value.redactConfig,
        'dateOffsetConfig': DateOffsetConfigToJSON(value.dateOffsetConfig),
        'annotationTypes': value.annotationTypes,
    };
}


